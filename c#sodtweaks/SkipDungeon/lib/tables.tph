// Helper function: Returns the row of a matching container name. Returns -1 if not found.
DEFINE_PATCH_FUNCTION TABLE_MATCH_CONTAINER
STR_VAR
  area      = ~~  // the area where the container is located
  container = ~~  // the container name (without spaces)
RET row
BEGIN
  SET row = "-1"
  PATCH_IF (NOT ~%area%~ STRING_EQUAL ~~ AND NOT ~%container%~ STRING_EQUAL ~~) BEGIN
    FOR (idx = 0; idx < control_table; idx += 1) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 0 action
      PATCH_IF (~%action%~ STRING_EQUAL ~SKIP_CONTAINER~) BEGIN
        READ_2DA_ENTRY_FORMER "control_table" idx 1 areaName
        READ_2DA_ENTRY_FORMER "control_table" idx 2 containerName
        PATCH_IF (~%area%~ STRING_EQUAL_CASE ~%areaName%~ AND ~%container%~ STRING_EQUAL_CASE ~%containerName%~) BEGIN
          SET row = idx
          SET idx = control_table
        END
      END
    END
  END
END

DEFINE_ACTION_FUNCTION CREATE_TRANSFER_DATA
STR_VAR
  dstContainer = ~~
  pc_chest      = ~~
  target_area   = ~~
  target_area_script   = ~~
RET
//  supported_areas
//  item_create_unique
//  item_create
//  item_destroy
//  container_contents
  item_destroy_party //we only need this outside
BEGIN


/* This is the adapted version from Argent's "Skip Chateau Irenicus" version.
Main difference: all items from Player inventory will be moved to the PlayerChest00 in BD0103.are upon transition from Korlasz Dungeon. Hence, all items in this chest need to be considered, too. 
So far, all items from Korlasz Dungeon will be moved to the mod container "c#st0001" (bedside table in BD0103.are, PC's chamber). The code would allow for different containers to be used for items from the different areas in Korlasz Dungeon. 
If other containers are used, make sure to add the destruction of the gold in these containers as it is done in the bd0103.baf. 
I made this a function so I can use it for different target areas in case EndlessBG1 or Transitions are installed. */

// *** Prepares item control tables ***

//LOG ~DEBUG: Starting parsing item control tables...~

OUTER_TEXT_SPRINT table_data ~~

ACTION_BASH_FOR ~%MOD_FOLDER%/SkipDungeon/tables~ ~^.+\.2da$~ BEGIN
  LOG ~DEBUG: Loading table "%BASH_FOR_FILE%"...~

  COPY - ~%BASH_FOR_FILESPEC%~ ~%BASH_FOR_FILESPEC%~
    PATCH_IF (SOURCE_SIZE > 0) BEGIN
      READ_ASCII 0 data (SOURCE_SIZE)
      TEXT_SPRINT table_data ~%table_data%%LNL%%data%~
    END
END

// "control_table" contains all available item and container definitions
OUTER_PATCH ~%table_data%~ BEGIN
  READ_2DA_ENTRIES_NOW ~control_table~ 7
END

//LOG ~DEBUG: Finished parsing item control tables...~


// Variables containing script portions for handling items and containers
OUTER_SET supported_areas = 0             // array of area codes
OUTER_TEXT_SPRINT container_contents ~~   // sequence of script actions
OUTER_TEXT_SPRINT item_create ~~          // sequence of script actions
OUTER_TEXT_SPRINT item_create_unique ~~   // sequence of individual script blocks
OUTER_TEXT_SPRINT item_destroy ~~         // sequence of script actions
OUTER_TEXT_SPRINT item_destroy_party ~~   // sequence of script actions


// Generating list of supported areas
OUTER_FOR (idx = 0; idx < control_table; idx += 1) BEGIN
  OUTER_PATCH ~dummy~ BEGIN
    READ_2DA_ENTRY_FORMER "control_table" idx 0 action
    PATCH_IF (~%action%~ STRING_EQUAL ~ADD_AREA~) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 1 area
      PATCH_IF (FILE_EXISTS_IN_GAME ~%area%.ARE~) BEGIN
        TEXT_SPRINT EVAL "supported_areas_%supported_areas%" ~%area%~
        SET supported_areas += 1
      END
    END
  END
END


// Generating item transfer script
OUTER_FOR (idxArea = 0; idxArea < supported_areas; idxArea += 1) BEGIN
  OUTER_TEXT_SPRINT srcArea $EVAL supported_areas("%idxArea%")
  // This part is still hardcoded
/*
  ACTION_IF (~%srcArea%~ STRING_EQUAL_CASE ~bd0120~) BEGIN
    OUTER_TEXT_SPRINT dstContainer ~c#st0001~
  END ELSE ACTION_IF (~%srcArea%~ STRING_EQUAL_CASE ~bd0130~) BEGIN
    OUTER_TEXT_SPRINT dstContainer ~c#st0001~
  END ELSE BEGIN
    OUTER_TEXT_SPRINT dstContainer ~c#st0001~
  END
*/

  COPY_EXISTING - ~%srcArea%.ARE~ ~override~
    READ_LONG 0x70 ofsContainers
    READ_SHORT 0x74 numContainers
    FOR (idx = 0; idx < numContainers; idx += 1) BEGIN
      SET ofs = ofsContainers + (idx * 0xc0)
      READ_ASCII ofs name (32) NULL
      INNER_PATCH_SAVE name ~%name%~ BEGIN REPLACE_TEXTUALLY ~[ %TAB%]~ ~~ END
      LPF TABLE_MATCH_CONTAINER STR_VAR area = EVAL ~%SOURCE_RES%~ container = EVAL ~%name%~ RET row END
      PATCH_IF (row < 0) BEGIN
        TEXT_SPRINT container_contents ~%container_contents% MoveContainerContents("%SOURCE_RES%*%name%","%target_area%*%dstContainer%")~
      END ELSE BEGIN
        PATCH_LOG ~DEBUG: Excluding container "%SOURCE_RES%*%name%"~
      END
    END
END


// Generating item creation and destruction scripts
OUTER_FOR (idx = 0; idx < control_table; idx += 1) BEGIN
  OUTER_PATCH ~dummy~ BEGIN
    READ_2DA_ENTRY_FORMER "control_table" idx 0 action
    READ_2DA_ENTRY_FORMER "control_table" idx 1 area

/*
// determining target container
    PATCH_IF (~%area%~ STRING_EQUAL_CASE ~bd0120~) BEGIN
      TEXT_SPRINT dstContainer ~c#st0001~
    END ELSE PATCH_IF (~%area%~ STRING_EQUAL_CASE ~bd0130~) BEGIN
      TEXT_SPRINT dstContainer ~c#st0001~
    END ELSE BEGIN
      TEXT_SPRINT dstContainer ~c#st0001~
    END
*/

    PATCH_IF (~%action%~ STRING_EQUAL ~CREATE_ITEM~) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 2 res
      READ_2DA_ENTRY_FORMER "control_table" idx 3 unique
      READ_2DA_ENTRY_FORMER "control_table" idx 4 charge1
      READ_2DA_ENTRY_FORMER "control_table" idx 5 charge2
      READ_2DA_ENTRY_FORMER "control_table" idx 6 charge3

      PATCH_IF (unique) BEGIN
        TEXT_SPRINT item_create_unique ~%item_create_unique%%LNL%IF AreaCheck("%target_area%") Global("C#st_ShortcutEnabled", "GLOBAL", 1) Global("C#st_TransferItems", "GLOBAL", 0) !PartyHasItem("%res%") !HasItem("%res%","%pc_chest%") THEN RESPONSE #100 ActionOverride("%dstContainer%", CreateItem("%res%", %charge1%, %charge2%, %charge3%)) Continue() END~
      END ELSE BEGIN
        TEXT_SPRINT item_create ~%item_create%%LNL%ActionOverride("%dstContainer%", CreateItem("%res%", %charge1%, %charge2%, %charge3%))~
      END
    END ELSE PATCH_IF (~%action%~ STRING_EQUAL ~DESTROY_ITEM~) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 1 area
      READ_2DA_ENTRY_FORMER "control_table" idx 2 res
      READ_2DA_ENTRY_FORMER "control_table" idx 3 invOnly

      TEXT_SPRINT item_destroy_party ~%item_destroy_party%%LNL%TakePartyItemAll("%res%")~
      PATCH_IF (invOnly = 0) BEGIN
        TEXT_SPRINT item_destroy ~%item_destroy%%LNL%ActionOverride("%dstContainer%", DestroyItem("%res%"))ActionOverride("%pc_chest%",DestroyItem("%res%"))~
      END
    END
  END
END

EXTEND_BOTTOM ~%target_area_script%.bcs~ ~c#sodtweaks/SkipDungeon/item_transfer.baf~ EVALUATE_BUFFER

END //CREATE_TRANSFER_DATA